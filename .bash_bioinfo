#!/bin/bash

# Dependencies
# - samtools

subsample_fastq() {

	# PARAM
	READS1_PATH=${1}
	READS2_PATH=${2}
	NUMBER=${3}
	OUTDIR=${4}

	# VERIFICATIONS
	if [[ -z ${READS1_PATH} || -z ${READS2_PATH} || -z ${NUMBER} || -z ${OUTDIR} ]] ; then

		echo -e "sample_fastq READS1 READS2 READS_NUMBER OUTPUT_DIRECTORY"
		echo -e "READS1 ---> ${READS1_PATH}"
		echo -e "READS2 ---> ${READS2_PATH}"
		echo -e "NUMBER ---> ${NUMBER}"
		echo -e "OUTDIR ---> ${OUTDIR}"

	else

		# NAMES
		READS1_FULLNAME=$( basename ${READS1_PATH} )
		READS1_NAME=${READS1_FULLNAME%%.*}
		READS2_FULLNAME=$( basename ${READS2_PATH} )
		READS2_NAME=${READS2_FULLNAME%%.*}

		# SUBSAMPLING
		paste ${READS1_PATH} ${READS2_PATH} | awk '{ printf( "%s", $0 ) ; n++ ; if( n%4==0 ) { printf( "\n" ) ; } else { printf( "\t\t" ) ; } }' | shuf | head -n ${NUMBER} | sed 's/\t\t/\n/g' | awk -F '\t' -v file1="${OUTDIR}/${NUMBER}.${READS1_NAME}.fastq" -v file2="${OUTDIR}/${NUMBER}.${READS2_NAME}.fastq" '{ print $1 > file1 ; print $2 > file2 }'

		#merge the two fastqs
		#merge by group of 4 lines
		#shuffle
		#only 10 records
		#restore the delimiters
		#split in two files.

	fi
}

fqsize() {
	if [[ ${1} =~ ".fastq.gz" ]] ; then
		zcat ${1} | echo $(( $( wc -l ) / 4 ))
	elif [[ ${1} =~ ".fastq" ]] ; then
		cat ${1} | echo $(( $( wc -l ) / 4 ))
	fi
}

dim() {
	ROW=$( more ${1} | wc -l )
	COLUMN=$( awk '{print NF}' ${1} | sort -nu | tail -n 1 )
	echo -e "${ROW}\t${COLUMN}"
}

# FASTA description : sequence ID + sequence length
fadesc () {
	samtools faidx ${1}
	cat "${1}.fai" | cut -f1,2
	rm "${1}.fai"
}

# Extract sequences from FASTA
faget (){
	FASTA=${1}
	SEQIDS=${2}
	if [[ ${FASTA} == "" || $SEQIDS == "" ]] ; then
		echo "Usage : faget FASTA_FILE SEQID_LIST"
	else
		if [[ ! -e "${1}.fai" ]] ; then samtools faidx ${1} ; fi
		xargs samtools faidx ${1} < ${2}
	fi
}

gff (){
	cat <<EOF

Column 1: "seqid"
Column 2: "source"
Column 3: "type"
Column 4: "start"
Column 5: "end"
Column 6: "score"
Column 7: "strand"
Column 8: "phase"
Column 9: "attributes"

More info at https://github.com/The-Sequence-Ontology/Specifications/blob/master/gff3.md

EOF
}

new_script (){

	usage (){
cat <<EOF
	Usage : new_script LANGUAGE SCRIPT_NAME
		- LANGUAGE can be bash or perl

	Example : new_script bash script.sh
EOF
	}

	LANGUAGE=${1}
	SCRIPT_NAME=${2}
	if [[ ${LANGUAGE} == "" || ${SCRIPT_NAME} == "" ]] ; then
		usage
		exit 1
	fi

	if [[ ${LANGUAGE} == "bash" ]] ; then
		wget -O ${SCRIPT_NAME} https://raw.githubusercontent.com/thbtmntgn/script_templates/master/bash_script_template.sh
	elif [[ ${LANGUAGE} == "perl" ]] ; then
		wget -O ${SCRIPT_NAME} https://raw.githubusercontent.com/thbtmntgn/script_templates/master/perl_script_template.pl
	else
		usage
		exit 1
	fi
}
